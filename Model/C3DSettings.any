Main.ModelSetup.C3DFileData = {

  FileName = MOCAP_C3D_DATA_PATH 
             + "/" + Main.ModelSetup.SubjectSpecificData.SubjectID
             + "/" + Main.ModelSetup.TrialSpecificData.TrialFileName
             + ".c3d";
             
  ConstructModelOnOff = Off;
  ConstructChartOnOff = Off;
  GapFillUsingResidualsOnOff = On;
  WeightTransitionTime = 0.5;
  
  SearchAndReplace = {
    {"Force.", ""},
    {"Moment.", ""},
    {"L_GRTOC", "L_GTROC"}
  };
  
  MarkerUseAllPointsOnOff = On; 
  MarkerUseCamMaskOnOff = Off;
  
  PointsScaleFactor = 1/1000;
  
  #ifdef _STANDING_REFERENCE_
  //Hackworkaround.
  MarkerInterPolType = ConstantValue;
  //MarkerBsplineOrder = min({8, Header.LastFrameNo-Header.FirstFrameNo+1});
  #endif
  
  // HACK_WORKAROUND. We need to disable filters when 
  // using recordings which has less data than 3 times filter order
  MarkerFilterIndex = iffun(gtfun(Header.LastFrameNo-Header.FirstFrameNo+1,MarkerFilterOrder *3 ), 0 ,-1) ;
  AnalogFilterIndex = iffun(gtfun((Header.LastFrameNo-Header.FirstFrameNo+1)*Header.NoAnalogSamplesPer3DFrame,
                                   AnalogFilterOrder*3 ), 1 ,-1);    
  
                                       
  AnyInt AnalogFilterOrder = Main.ModelSetup.LabSpecificData.LowPassFilterSettings.ForceFilterOrder;
  AnyInt MarkerFilterOrder = Main.ModelSetup.LabSpecificData.LowPassFilterSettings.MarkerFilterOrder;

                                       
  Filter =  {
    N = .MarkerFilterOrder;
    Fc = {Main.ModelSetup.LabSpecificData.LowPassFilterSettings.MarkerFilterCutOffFrequency};
    Type = LowPass;
  };
  
  /// This filter is used for the analog data
  AnyFunButterworthFilter LowPassFilter = {
    FilterForwardBackwardOnOff = On;
    AutomaticInitialConditionOnOff = On;
    N = .AnalogFilterOrder;
    AnyVar CutOffFrequency=Main.ModelSetup.LabSpecificData.LowPassFilterSettings.ForceFilterCutOffFrequency;

    AnyVar SampleFreq=.Header.VideoFrameRate* .Header.NoAnalogSamplesPer3DFrame;
    W = {1/(iffun(eqfun(SampleFreq,0),100.0,SampleFreq)*0.5)*CutOffFrequency};
    Type = LowPass;
  };
  
};


