
Main.EnvironmentModel.GlobalRef = {
  AnyRefNode RotNode = {ARel = RotMat(pi/2,x); };
};

// These drivers are included for all trials.
#if _INCLUDE_UPPER_BODY_
  #define _STERNO_CLAVICULA_DRIVER
#else
  #define _HARD_NECK_DRIVER
#endif

// These drivers are included in the standing reference trial
#ifdef _STANDING_REFERENCE_
   #define _HIP_EXT_ROT_DRIVER
   #define _FOOT_FLAT_ON_GROUND_DRIVER
   #ifndef _THORAX_ROTATION_DRIVER
   #define _THORAX_ROTATION_DRIVER
   #endif
   #ifndef _HIP_FLEXION_DRIVER
   #define _HIP_FLEXION_DRIVER
   #endif
   #ifndef _THORAX_EXTENSION_DRIVER
   #define _THORAX_EXTENSION_DRIVER
   #endif
#endif





AnyFolder ExtraDrivers = {
   AnyFolder &JntPos= Main.HumanModel.Mannequin.Posture;  
   AnyFolder &JntVel= Main.HumanModel.Mannequin.PostureVel;
  

#ifdef _AVERAGE_HIP_DISTANCE
AnyKinEqSimpleDriver SoftHipDistanceDriver ={
  AnyKinPLine hipdist = {
     AnyRefFrame& rhip = Main.HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg.Right.HipJoint;
     AnyRefFrame& lhip = Main.HumanModel.BodyModel.Trunk.SegmentsLumbar.PelvisSeg.Left.HipJoint;
  };
  DriverPos = {Main.ModelSetup.SubjectSpecificData.AverageHipDistance };
  DriverVel = {0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={1}; }; };
  WeightFun = {&Weight.fun};
};
#endif
   
   
   
   
   
   
   
   
#ifdef _STERNO_CLAVICULA_DRIVER
AnyKinEqSimpleDriver SCDriver ={
  AnyKinMeasureOrg &ref_left = Main.HumanModel.BodyModel.Interface.Left.SternoClavicularAxialRotation;
  AnyKinMeasureOrg &ref_right  = Main.HumanModel.BodyModel.Interface.Right.SternoClavicularAxialRotation;
  DriverPos = pi/180*{
    .JntPos.Left.SternoClavicularAxialRotation,
    .JntPos.Right.SternoClavicularAxialRotation
  };
  DriverVel = pi/180*{
    .JntVel.Left.SternoClavicularAxialRotation,
    .JntVel.Right.SternoClavicularAxialRotation
  };
  Reaction.Type={Off,Off};
  CType = {Soft, Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun, &Weight.fun};
};
#endif





// This ensures the foot is flat on the ground in the 
#ifdef _FOOT_FLAT_ON_GROUND_DRIVER
  
 AnyKinEqSimpleDriver RightFootGroundDriver=
 {
   AnyKinRotational rot = {
     AnyRefFrame &foot = Main.HumanModel.BodyModel.Right.Leg.Seg.Foot.AnatomicalFrame;
     AnyRefFrame &ground = Main.EnvironmentModel.GlobalRef.RotNode;
     Type = RotAxesAngles;
     Axis1 = y; Axis2 = z;  Axis3 = x;
  };
  MeasureOrganizer = {1,2};
  DriverPos  ={0,0};
  DriverVel = {0,0};
  Reaction.Type={Off,Off};
  CType = {Soft,Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.1,0.001}; }; };
  WeightFun = {&Weight.fun};
};  

AnyKinEqSimpleDriver LeftFootGroundDriver={
   AnyKinRotational rot = {
     AnyRefFrame &foot = Main.HumanModel.BodyModel.Left.Leg.Seg.Foot.AnatomicalFrame;
     AnyRefFrame &ground = Main.EnvironmentModel.GlobalRef.RotNode;
     Type = RotAxesAngles;
     Axis1 = y; Axis2 = z; Axis3 = x;
   };
  MeasureOrganizer = {1,2};
  DriverPos  ={0,0};
  DriverVel = {0,0};
  Reaction.Type={Off,Off};
  CType = {Soft,Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.1,0.001}; }; };
  WeightFun = {&Weight.fun};
}; 
#endif

#ifdef _SKULL_LOOK_STRAIGHT_DRIVER
AnyKinEqSimpleDriver SkullGroundDriver={
  AnyKinRotational Rot = {
     AnyRefFrame &ref0 = Main.HumanModel.BodyModel.Trunk.SegmentsThorax.SkullSeg.AnatomicalFrame;
     AnyRefFrame &ref1 = Main.EnvironmentModel.GlobalRef.RotNode;
     Type = RotAxesAngles;
     Axis1 = y; Axis2 = z; Axis3 = x;
  };
  MeasureOrganizer = {1,2};
  DriverPos={0,0};
  DriverVel={0,0};
  Reaction.Type={Off,Off};
  CType = {Soft,Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.01,0.01}; }; };
  WeightFun = {&Weight.fun};
};  
#endif


#ifdef _HARD_NECK_DRIVER

AnyKinEqSimpleDriver HardNeckDriver ={
  AnyKinMeasureOrg &ref1 =Main.HumanModel.BodyModel.Interface.Trunk.SkullThoraxFlexion;
  AnyKinMeasureOrg &ref2 =Main.HumanModel.BodyModel.Interface.Trunk.SkullThoraxLateralBending;
  AnyKinMeasureOrg &ref3 =Main.HumanModel.BodyModel.Interface.Trunk.SkullThoraxRotation;
  DriverPos = pi/180*{
    .JntPos.NeckExtension,
    .JntPos.NeckLateralBending,
    .JntPos.NeckRotation
  };
  DriverVel = pi/180*{
    .JntVel.NeckExtension,
    .JntVel.NeckLateralBending,
    .JntVel.NeckRotation
  };
  Reaction.Type={Off,Off,Off};
};


#endif


#ifdef _STERNO_CLAVICULA_PROTRACTION_DRIVER
AnyKinEqSimpleDriver SternoClavicularProtraction ={
  AnyKinMeasureOrg &ref =Main.HumanModel.BodyModel.Interface.Left.SternoClavicularProtraction;
  AnyKinMeasureOrg &ref =Main.HumanModel.BodyModel.Interface.Right.SternoClavicularProtraction;
  DriverPos = pi/180*{
    .JntPos.Left.SternoClavicularProtraction,
    .JntPos.Right.SternoClavicularProtraction
  };
  DriverVel = pi/180*{
    .JntVel.Left.SternoClavicularProtraction,
    .JntVel.Right.SternoClavicularProtraction    
  };
  Reaction.Type={Off,Off};
  CType = {Soft,Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.005}; }; };
  WeightFun = {&Weight.fun, &Weight.fun};
};
#endif

#ifdef _THORAX_ROTATION_DRIVER
AnyKinEqSimpleDriver ThoraxRotation={
  AnyKinMeasureOrg &ref = Main.HumanModel.BodyModel.Interface.Trunk.PelvisThoraxRotation;
  DriverPos= pi/180*{
    .JntPos.PelvisThoraxRotation
  };
  DriverVel={0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={1}; }; };
  WeightFun = {&Weight.fun};
};     
#endif
#ifdef _THORAX_EXTENSION_DRIVER
AnyKinEqSimpleDriver ThoraxExtension ={
  AnyKinMeasureOrg &ref = Main.HumanModel.BodyModel.Interface.Trunk.PelvisThoraxExtension ;
  DriverPos=pi/180*{
    .JntPos.PelvisThoraxExtension
  };
  DriverVel={0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.01}; }; };
  WeightFun = {&Weight.fun};
}; 
#endif
#ifdef _THORAX_LATERAL_BENDING_DRIVER
AnyKinEqSimpleDriver ThoraxLateralBending ={
  AnyKinMeasureOrg &ref = Main.HumanModel.BodyModel.Interface.Trunk.PelvisThoraxLateralBending ;
  DriverPos=pi/180*{
    .JntPos.PelvisThoraxLateralBending
  };
  DriverVel={0};
  Reaction.Type={Off};
  CType = {Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={1}; }; };
  WeightFun = {&Weight.fun};
}; 
#endif

#ifdef _HIP_EXT_ROT_DRIVER
AnyKinEqSimpleDriver HipExternalRotation={
  AnyKinMeasureOrg &ref = Main.HumanModel.BodyModel.Interface.Right.HipExternalRotation;
  AnyKinMeasureOrg &ref2= Main.HumanModel.BodyModel.Interface.Left.HipExternalRotation; 
  DriverPos=pi/180*{
    .JntPos.Right.HipExternalRotation,
    .JntPos.Left.HipExternalRotation
  };
  DriverVel={0,0};
  Reaction.Type={Off,Off};
  CType = {Soft,Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.1,0.1}; }; };
  WeightFun = {&Weight.fun};
}; 
#endif

#ifdef _HIP_FLEXION_DRIVER
AnyKinEqSimpleDriver HipFlexion={
  AnyKinMeasureOrg &ref = Main.HumanModel.BodyModel.Interface.Right.HipFlexion;
  AnyKinMeasureOrg &ref2= Main.HumanModel.BodyModel.Interface.Left.HipFlexion; 
  DriverPos=pi/180*{
    .JntPos.Right.HipFlexion,
    .JntPos.Left.HipFlexion
  };
  DriverVel={0,0};
  Reaction.Type={Off,Off};
  CType = {Soft,Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={0.01,0.01}; }; };
  WeightFun = {&Weight.fun};
}; 
#endif




#ifdef _EXTENDED_KNEE_DRIVER
AnyKinEqSimpleDriver KneeFlexion={
  AnyKinMeasureOrg &ref1= Main.HumanModel.BodyModel.Interface.Right.KneeFlexion; 
  AnyKinMeasureOrg &ref2= Main.HumanModel.BodyModel.Interface.Left.KneeFlexion; 
  DriverPos={0};
  DriverVel={0};
  Reaction.Type={Off,Off};
  CType = {Soft,Soft};
  AnyFolder Weight = { AnyFunConst fun =  { Value ={1}; }; };
  WeightFun = {&Weight.fun, &Weight.fun};
};
#endif
};
